# IMPORTANT!  If using Splunk, you need at _least_ 1GB of ram
# Vagrant has only 500MB out of the box

---

- name: Reset all _local variables
  set_fact:
    vols:
      - "/data/splunk/etc:/opt/splunk/etc"
      - "/data/splunk/var:/opt/splunk/var"
      - "{{ base_dir }}/splunk-apps:/opt/splunk/etc/splunk-apps:ro"
      - "/var/log/supervisor:/var/log/supervisor:ro"

- set_fact:
    vols: "{{ vols }} + [ '{{mount_pt}}:{{mount_pt}}:ro' ]"
  when: mount_pt is defined

- name: Make sure data/splunk/etc exists
  file:
    path: "/data/splunk/etc"
    state: directory
  become:  yes

- name: Make sure data/splunk/var exists
  file:
    path: "/data/splunk/var"
    state: directory
  become:  yes

- name: Make sure splunk-apps exists
  file:
    path: "{{ base_dir }}/splunk-apps"
    state: directory
  become: yes

- name: Make sure /var/log/supervisor exists
  file:
    path: /var/log/supervisor
    state: directory
  become: yes

- name: Make sure {{ mount_pt }} exists
  file:
    path: "{{ mount_pt }}"
    state: directory
  become:  yes
  when:    mount_pt is defined

- name: Setup splunk index container
  docker_container:

    name:  splunk
    image: splunk/splunk:latest
    state: started

    ports: ["8000:8000", "8088:8088", "8089:8089", "9997:9997", "514:1514"]
#    volumes: "{{ ['/var/log/supervisor/:/var/log/supervisor/:ro'] if mount_pt is not defined
#                 else ['/var/log/supervisor/:/var/log/supervisor/:ro',
#                       mount_pt + ':' + mount_pt ] }}"

    volumes: "{{ vols }}"

#    volumes_from: data

    env:
      # Answer yes accepts presumptive upgrade
      SPLUNK_START_ARGS:  "--accept-license --answer-yes"

      # This all works _only_ on a totally fresh install (no upgrade)
      SPLUNK_CMD:   "edit user admin -password {{ splunk_admin_pw }} -role admin -auth admin:changeme"
      SPLUNK_CMD_1: "add tcp 1514 -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_2: "add index dicom -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_3: "add index diana_svc -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_4: "add index hl7 -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_5: "add monitor /var/log/supervisor -index diana_svc -auth admin:{{ splunk_admin_pw }}"
      # In order to watch supervisor logs, you need to make them readable by hand
      # chmod +r /var/log/supervisor/*

      # See http://dev.splunk.com/view/event-collector/SP-CAAAE7D

      SPLUNK_CMD_6: "http-event-collector enable -enable-ssl 0 -uri https://localhost:8089 -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_7: "http-event-collector create diana_svc 'DIANA service logs' -index diana_svc -uri https://localhost:8089 -auth admin:{{ splunk_admin_pw }}"
      SPLUNK_CMD_8: "http-event-collector create diana_dcm 'DIANA DICOM tag data' -index dicom -uri https://localhost:8089 -auth admin:{{ splunk_admin_pw }}"

  notify: "wait_for_splunk"

- meta: flush_handlers

- name: Copy Splunkbase apps to shared dir
  copy:
    src: "{{ role_path }}/splunkbase/"
    dest: "{{ base_dir }}/splunk-apps/"
  become: yes
  when: FRESH is defined

- name: Install Splunkbase apps from shared dir
  command:  "docker exec splunk bin/splunk install app /opt/splunk/etc/splunk-apps/{{ item | basename }} -update 1 -auth admin:{{ splunk_admin_pw }}"
  with_fileglob:  # fileglob runs on local, so this is a bit of a hack
    - "{{ role_path }}/splunkbase/*.tgz"
  when: FRESH is defined

- name: Add hl7 monitor if req
  command:  docker exec splunk bin/splunk add monitor {{mount_pt}} -sourcetype hl7_v2 -index hl7 -auth admin:{{ splunk_admin_pw }}
  when: mount_pt is defined
  ignore_errors: yes  # Might already exist

# ------------------------------------
# Always need to set these tokens for the rest of the playbook
# ------------------------------------
- name: List available tokens
  command:  docker exec splunk bin/splunk http-event-collector list -uri https://localhost:8089 -auth admin:{{ splunk_admin_pw }}
  register: result

- set_fact:
    diana_svc_tok: "{{ result.stdout | regex_findall(regexp) | first }}"
  vars:
    regexp: 'http:\/\/diana_svc\n\s*token=(?P<diana_svc_tok>.*)\n'
- debug:
    var: diana_svc_tok

- set_fact:
    diana_dcm_tok: "{{ result.stdout | regex_findall(regexp) | first }}"
  vars:
    regexp: 'http:\/\/diana_dcm\n\s*token=(?P<diana_dcm_tok>.*)\n'
- debug:
    var: diana_dcm_tok

