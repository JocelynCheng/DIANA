---
# $ ansible-playbook -i test_inv.yml central-im-playbook.yml -b --skip-tags skip -t databases
# $ ansible-playbook -i ../../_secrets/do_inv.yml central-im-playbook.yml -b --skip-tags skip

# Notes -- could also run trialist, snappass, guidmint apps as dokku apps for easy update

################################
# Setup indexer
################################

- hosts: indexer
  tags: indexer

  vars:
    service_password: "{{  hostvars[inventory_hostname]['service_password'] | default('passw0rd') }}"
    data_dir:         "{{  hostvars[inventory_hostname]['data_dir'] | default('/data') }}"
    config_dir:       "{{  hostvars[inventory_hostname]['config_dir'] | default('/config') }}"

  roles:
    - name: Splunk
      role: splunk-docker
      splunk_password: "{{ service_password }}"
      splunk_use_data_container: False
      splunk_extra_indices: ['logging', 'dicom', 'remotes']
      splunk_extra_toks:
        logging_tok:
          desc: Splunk logging service token
          index: logging
        remotes_tok:
          desc: Splunk remote monitoring service token
          index: remotes

    - name: Docker-logging
      role: splunk-docker-logging
      splunk_logging_token: "{{ splunk_toks.logging_tok | default( hostvars[inventory_hostname]['splunk_logging_tok'] ) }}"
    # TODO: Should just look the token up when needed, maybe add it if not there
    # TODO: Sometimes need to manually turn on the hec receiver between steps to enable logging?


################################
# Setup databases
################################

- hosts: databases
  tags: databases

  vars:
    service_password: "{{  hostvars[inventory_hostname]['service_password'] | default('passw0rd') }}"
    data_dir:         "{{  hostvars[inventory_hostname]['data_dir'] | default('/data') }}"
    config_dir:       "{{  hostvars[inventory_hostname]['config_dir'] | default('/config') }}"

    # Usually set by log configurator, assumes splunk routing info is set in `daemon.json`
    logger:           "splunk"

  roles:

    # Pre-req service for DIANA-Watcher and Snappass
    - name: Redis
      role: redis-docker
      password: "{{ service_password }}"
      # TODO: Redis: Add a data container or bind mount option

    # Pre-req service for large Orthanc databases
    # This role has to match the config expected by `queued_orthancs` _exactly_ or that
    #   role will recreate its preferred config (which is persistent via bind by default)
    # If it does match, the postgres container can be discarded and recreated without loss
    #   of data
    # Create orthanc service user (default for orthanc_pg_user)
    - name: Postgres
      role: postgres-docker
      postgres_use_data_container: False
      postgres_user: "orthanc"
      postgres_password: "{{ service_password }}"


################################
# Setup internet services
################################

- hosts: servers
  tags: internet

  vars:
    service_password: "{{  hostvars[inventory_hostname]['service_password'] | default('passw0rd') }}"
    data_dir:         "{{  hostvars[inventory_hostname]['data_dir'] | default('/data') }}"
    config_dir:       "{{  hostvars[inventory_hostname]['config_dir'] | default('/config') }}"

    # Usually set by log configurator
    logger:           "splunk"

    common_name:      "central-imaging.com"
    public_host_name: "{{  hostvars[inventory_hostname]['public_host_name'] | default('www') }}"
    trial_config:     "~/dev/DIANA/examples/central-imaging/trials.yml"

  pre_tasks:

    # Create upstreams for nginx
    - set_fact:
        config: "{{ lookup('file', trial_config, split_lines=False) | from_yaml }}"
    - set_fact:
        trials: "{{ config.trials }}"
        trial_base_port: "{{ config.trial_base_port }}"
    - set_fact:
        upstreams: "{{ [{'name': 'trialist', 'path': None,        'pool': [{'port': 5000}] },
                        {'name': 'snappass', 'path': '/snappass', 'pool': [{'port': 5001}] } ] }}"
    - set_fact:
        upstreams: "{{ upstreams + [{'name': trial.study_id, 'path': '/'+trial.study_id+'/images', 'pool': [{'port': trial_base_port|int + trial.port_offset|int + 3}]}] }}"
      with_list: "{{ trials }}"
      loop_control:
        loop_var: trial
    - debug:
        msg: "{{ upstreams }}"

  roles:

    - name: front end
      role: diana-docker
      diana_container_name: diana-trialist
      diana_workdir: /usr/share/source/diana/apps/trialist
      diana_command: "bash -c 'git pull && pip install -r requirements.txt && DIANA_TRIALIST_CONFIG=/usr/share/source/diana/examples/central-imaging/trials.yml python3 trialist.py'"
      diana_ports:
        - "5000:5000"
    # TODO: Trialist: Add upload button -> /data dir
    # TODO: Trialist: Add user credentials to protect upload

    - name: snappass
      role: snappass-docker
      snappass_port:          5001
      snappass_redis_container_name:  redis
      snappass_redis_password: "{{ service_password }}"
      snappass_redis_db:      3

    - name: ftpd
      role: pureftpd-docker
      pftp_use_data_container: False
      pftp_host_name:        "{{ public_host_name }}.{{ common_name }}"
      pftp_service_password: "{{ service_password }}"
      # TODO: FTP: Check works

# First run only to bring up a secured nginx service
#    - role: secured
#      tags: secured
#      secured_cert_type:      "selfsigned"
#      secured_common_name:    "{{ common_name }}"
#      secured_host_name:      "{{ public_host_name }}.{{ common_name }}"
#      secured_admin_email:    "derek.merck@gmail.com"
#      secured_org_name:       "Central Medical Imaging Registry"

    - name: httpd
      role: nginx-docker
      tags: secured
      nginx_upstreams:        "{{ upstreams }}"
      nginx_host_name:        "{{ public_host_name }}.{{ common_name }}"
      nginx_secured:          False

    - role: secured
      tags: skip
      secured_cert_type:      "certbot"
      secured_common_name:    "{{ common_name }}"
      secured_host_name:      "{{ public_host_name }}.{{ common_name }}"
      secured_admin_email:    "derek.merck@gmail.com"
      secured_org_name:       "Central Medical Imaging Registry"

  post_tasks: []

    # Run unsecured/self-signed to install certs, then bounce to secure
    # - docker_container:
    #    name: nginx
    #    state: started
    #    restart: yes
    # TODO: Secured: Restart nginx only when certbot-secured step changes certs


################################
# Setup trails based on trials.yml
################################

- name: Setup trials
  hosts: servers
  tags: trials

  vars:
    service_password: "{{  hostvars[inventory_hostname]['service_password'] | default('passw0rd') }}"
    data_dir:         "{{  hostvars[inventory_hostname]['data_dir'] | default('/data') }}"
    config_dir:       "{{  hostvars[inventory_hostname]['config_dir'] | default('/config') }}"

    # Usually set by log configurator, assumes splunk routing info is set in `daemon.json`
    logger:           "splunk"

    trial_config:     "~/dev/DIANA/examples/central-imaging/trials.yml"

  tasks:

    - set_fact:
        config: "{{ lookup('file', trial_config, split_lines=False) | from_yaml }}"
    - set_fact:
        trials: "{{ config.trials }}"
        trial_base_port: "{{ config.trial_base_port }}"

    - name: "Add queued orthancs for {{ trial.full_name }}"
      include_role:
        name: queued-orthanc
      vars:
        qorth_base_name: "{{ trial.study_id }}"
        qorth_destination:
          orthanc_docker_image: jodogne/orthanc-plugins
          orthanc_pg_backend: True
          orthanc_use_data_container: False
          orthanc_password:  "{{ service_password }}"
          orthanc_ports:
            dicom: "{{ trial_base_port|int + trial.port_offset|int + 2 }}"
            api:   "{{ trial_base_port|int + trial.port_offset|int + 3 }}"

        qorth_queue:
          orthanc_password:  "{{ service_password }}"
          orthanc_ports:
            dicom: "{{ trial_base_port|int + trial.port_offset|int + 0 }}"
            api:   "{{ trial_base_port|int + trial.port_offset|int + 1 }}"

      with_list: "{{ trials }}"
      loop_control:
        loop_var: trial


################################
# Setup a diana-workers (if needed)
################################

- name: Setup handlers
  hosts: servers
  tags: handlers

  vars:
    service_password: "{{  hostvars[inventory_hostname]['service_password'] | default('passw0rd') }}"
    data_dir:         "{{  hostvars[inventory_hostname]['data_dir'] | default('/data') }}"
    config_dir:       "{{  hostvars[inventory_hostname]['config_dir'] | default('/config') }}"

    # Usually set by log configurator, assumes splunk routing info is set in `daemon.json`
    logger:           "splunk"

  roles:
    - name: diana
      role: diana-docker
      diana_container_name: diana-watcher
      diana_command: "python3 apps/cli/watcher.py {{ config_dir }}/diana/routes"
      # TODO: Watcher: Check that it moves data from file -> queue -> archive w anonymization
      # TODO: Watcher: when diana/routes is not empty
      # TODO: Watcher: Bind to orthanc/config dir to force DEST updates

